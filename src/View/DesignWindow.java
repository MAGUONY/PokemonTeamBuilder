/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.FileIO;
import Controller.Pokemon;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
/**
 *
 * @author racevedo319
 */
public class DesignWindow extends javax.swing.JFrame {

    /**
     * Creates new form Ex
     */
    public DesignWindow() {
        initComponents();
        fillPokedex(lstPokedex);
        disableEditor(rbtnMale, rbtnFemale, txtNickname, cboxNature, cboxAbilities, cboxMoveOne, cboxMoveTwo, cboxMoveThree, cboxMoveFour, btnAddButton, btnUpdate, btnRemove);
        btnSave.setEnabled(false);
        //ArrayList<Pokemon> pokemonList = Pokemon.makeAllPokemon();
        if (team.size() > 0){
            d.fillTeamIcons(iconPokemon1, iconPokemon2, iconPokemon3, iconPokemon4, iconPokemon5, iconPokemon6);
            btnSave.setEnabled(true);
        }
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblPokedex = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstPokedex = new javax.swing.JList<>();
        jPanel2 = new javax.swing.JPanel();
        lblTeam = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        iconPokemon1 = new javax.swing.JLabel();
        iconPokemon3 = new javax.swing.JLabel();
        iconPokemon5 = new javax.swing.JLabel();
        iconPokemon2 = new javax.swing.JLabel();
        iconPokemon4 = new javax.swing.JLabel();
        iconPokemon6 = new javax.swing.JLabel();
        iconType2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        iconPokemonToString = new javax.swing.JLabel();
        iconType1 = new javax.swing.JLabel();
        lblPokemonName = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        btnSaveAs = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnMainMenu = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        lblEditor = new javax.swing.JLabel();
        btnAddButton = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        rbtnMale = new javax.swing.JRadioButton();
        rbtnFemale = new javax.swing.JRadioButton();
        lblGender = new javax.swing.JLabel();
        lblNickname = new javax.swing.JLabel();
        txtNickname = new javax.swing.JTextField();
        lblNature = new javax.swing.JLabel();
        cboxNature = new javax.swing.JComboBox<>();
        lblAbilities = new javax.swing.JLabel();
        cboxAbilities = new javax.swing.JComboBox<>();
        lblMoves = new javax.swing.JLabel();
        cboxMoveOne = new javax.swing.JComboBox<>();
        cboxMoveTwo = new javax.swing.JComboBox<>();
        cboxMoveThree = new javax.swing.JComboBox<>();
        cboxMoveFour = new javax.swing.JComboBox<>();
        btnRemove = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pokemon Team Builder");

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 10));

        lblPokedex.setBackground(new java.awt.Color(219, 221, 233));
        lblPokedex.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        lblPokedex.setText("Pok√©dex");

        lstPokedex.setBackground(new java.awt.Color(140, 140, 140));
        lstPokedex.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lstPokedex.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstPokedex.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstPokedexMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstPokedex);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblPokedex)
                .addGap(91, 91, 91))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblPokedex)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 10));

        lblTeam.setBackground(new java.awt.Color(219, 221, 233));
        lblTeam.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        lblTeam.setText("Team");

        jPanel12.setBackground(new java.awt.Color(153, 153, 153));

        iconPokemon1.setBackground(new java.awt.Color(127, 127, 127));
        iconPokemon1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconPokemon1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        iconPokemon1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        iconPokemon1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                iconPokemon1MouseClicked(evt);
            }
        });

        iconPokemon3.setBackground(new java.awt.Color(127, 127, 127));
        iconPokemon3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconPokemon3.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        iconPokemon3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        iconPokemon3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                iconPokemon3MouseClicked(evt);
            }
        });

        iconPokemon5.setBackground(new java.awt.Color(127, 127, 127));
        iconPokemon5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconPokemon5.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        iconPokemon5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        iconPokemon5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                iconPokemon5MouseClicked(evt);
            }
        });

        iconPokemon2.setBackground(new java.awt.Color(127, 127, 127));
        iconPokemon2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconPokemon2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        iconPokemon2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        iconPokemon2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                iconPokemon2MouseClicked(evt);
            }
        });

        iconPokemon4.setBackground(new java.awt.Color(127, 127, 127));
        iconPokemon4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconPokemon4.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        iconPokemon4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        iconPokemon4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                iconPokemon4MouseClicked(evt);
            }
        });

        iconPokemon6.setBackground(new java.awt.Color(127, 127, 127));
        iconPokemon6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconPokemon6.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        iconPokemon6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        iconPokemon6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                iconPokemon6MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iconPokemon1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iconPokemon3, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iconPokemon5, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iconPokemon2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iconPokemon4, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iconPokemon6, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(iconPokemon1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(iconPokemon3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(iconPokemon5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(iconPokemon2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(iconPokemon4, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(iconPokemon6, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        iconType2.setText(" ");

        jSeparator1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));

        iconPokemonToString.setBackground(new java.awt.Color(127, 127, 127));
        iconPokemonToString.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconPokemonToString.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        iconPokemonToString.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        iconPokemonToString.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                iconPokemonToStringMouseClicked(evt);
            }
        });

        iconType1.setText(" ");

        lblPokemonName.setFont(new java.awt.Font("Cambria Math", 0, 32)); // NOI18N
        lblPokemonName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPokemonName.setText(" ");

        lblDescription.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        lblDescription.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblDescription.setText(" ");

        btnSaveAs.setText("Save As");
        btnSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAsActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnMainMenu.setText("Main Menu");
        btnMainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainMenuActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(iconPokemonToString, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(iconType2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(iconType1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lblPokemonName, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(lblDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnSaveAs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave)
                        .addGap(82, 82, 82)
                        .addComponent(lblTeam, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnMainMenu))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExit)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(513, 513, 513)
                .addComponent(iconType1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iconType2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(lblPokemonName, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTeam)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnSaveAs)
                                .addComponent(btnSave))
                            .addComponent(btnMainMenu))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btnExit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iconPokemonToString, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 10));

        lblEditor.setBackground(new java.awt.Color(219, 221, 233));
        lblEditor.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        lblEditor.setText("Editor");

        btnAddButton.setText("Add");
        btnAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddButtonActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        rbtnMale.setBackground(new java.awt.Color(153, 153, 153));
        rbtnMale.setText("Male");
        rbtnMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnMaleActionPerformed(evt);
            }
        });

        rbtnFemale.setBackground(new java.awt.Color(153, 153, 153));
        rbtnFemale.setText("Female");
        rbtnFemale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnFemaleActionPerformed(evt);
            }
        });

        lblGender.setText("Gender:");

        lblNickname.setText("Nickname:");

        lblNature.setText("Nature:");

        cboxNature.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hardy\t", "Lonely\t", "Brave", "Adamant\t", "Naughty\t", "Bold\t", "Docile\t", "Relaxed\t", "Impish\t", "Lax\t", "Timid\t", "Hasty\t", "Serious\t", "Jolly\t", "Naive\t", "Modest\t", "Mild\t", "Quiet\t", "Bashful\t", "Rash\t\t", "Calm\t", "Gentle\t", "Sassy\t", "Careful\t\t", "Quirky" }));

        lblAbilities.setText("Abilities:");

        lblMoves.setText("Moves:");

        cboxMoveOne.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboxMoveOneItemStateChanged(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboxNature, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboxAbilities, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(btnAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemove))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblGender)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(rbtnMale)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(rbtnFemale))
                                    .addComponent(lblNature)
                                    .addComponent(lblAbilities))
                                .addGap(19, 19, 19)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(txtNickname, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblNickname)
                                    .addComponent(lblMoves)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(cboxMoveFour, javax.swing.GroupLayout.Alignment.LEADING, 0, 134, Short.MAX_VALUE)
                                        .addComponent(cboxMoveThree, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cboxMoveTwo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cboxMoveOne, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(lblEditor)
                                .addGap(104, 104, 104)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(lblEditor)
                .addGap(29, 29, 29)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGender)
                    .addComponent(lblNickname))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnFemale)
                    .addComponent(rbtnMale)
                    .addComponent(txtNickname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNature)
                    .addComponent(lblMoves))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboxNature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboxMoveOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboxMoveTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAbilities))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboxMoveThree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboxAbilities, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cboxMoveFour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void fillTeamIcons(JLabel iconOne, JLabel iconTwo, JLabel iconThree,
                                 JLabel iconFour, JLabel iconFive, JLabel iconSix){
        
        try {  
            iconOne.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/" + team.get(0).getName().toLowerCase() + ".png"))); // set the icon into the label of the pokemon
        } catch (Exception e) {}   
                
        try {  
            iconTwo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/" + team.get(1).getName().toLowerCase() + ".png"))); // set the icon into the label of the pokemon
        } catch (Exception e) {} 
        
        try {   
            iconThree.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/" + team.get(2).getName().toLowerCase() + ".png"))); // set the icon into the label of the pokemon
        } catch (Exception e) {}
                
        try {     
            iconFour.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/" + team.get(3).getName().toLowerCase() + ".png"))); // set the icon into the label of the pokemon
        } catch (Exception e) {}

        try {     
            iconFive.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/" + team.get(4).getName().toLowerCase() + ".png"))); // set the icon into the label of the pokemon
        } catch (Exception e) {}
        
        try {    
            iconSix.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/" + team.get(5).getName().toLowerCase() + ".png"))); // set the icon into the label of the pokemon
        } catch (Exception e) {}
        
    }
    
    public static void fillTeam(ArrayList<Pokemon> newTeam){
        
        team = newTeam;
  
    }
    
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        boolean checkIfValid = true; //variable to keep track if input is valid
        ArrayList<JComboBox> comboBoxList = new ArrayList<>(); //arraylist of comboboxes to iterate through
        comboBoxList.add(cboxMoveOne); //add comboboxone to arraylist
        comboBoxList.add(cboxMoveTwo); //add comboboxtwo to arraylist
        comboBoxList.add(cboxMoveThree); //add comboxboxthree to arraylist
        comboBoxList.add(cboxMoveFour); //add comboboxfour to arraylist
        for (int i = 0; i != 4; i++){ //outer for loop to iterate through comboboxes to check for unique moves
            for (int x = 0; x != 4; x++){ //inner for loop that goes for the amount of moves in each combobox
                if (i != x){
                    Object one = comboBoxList.get(i).getSelectedItem();
                    Object two = comboBoxList.get(x).getSelectedItem();
                    if (one.equals(two) == false || one.toString().equals("~Empty Slot~") || two.toString().equals("~Empty Slot~") ){
                        //valid is acceptable
                        //ArrayList<String> movesList = new ArrayList<>();
                       
                    }
                    else {
                        checkIfValid = false;
                        
                    }
                    
                }
            }
        }
        
        int counter = 0;
        if (checkIfValid == true){
            for (int i = 0; i != 4; i++){
                if (comboBoxList.get(i).getSelectedItem().equals("~Empty Slot~")){
                    counter++;
                }
        }
            if (counter == 4){
                checkIfValid = false;
                JOptionPane.showMessageDialog(null, "Your " + pokemonList.get(pokemonIndex).getName() + " needs to have at least one move.");
            }
        }
            
        
        if (checkIfValid == true){
        
        
        
        String type = pokemonList.get(pokemonIndex).getType();
        String gender;
        if (rbtnMale.isSelected()){
            gender = "Male";
        }
        else if (rbtnFemale.isSelected()){
            gender = "Female";
        }
        else {
            gender = "Unspecified";
        }
        String nature = cboxNature.getSelectedItem().toString();
        ArrayList<String> abilities = new ArrayList<>();
        abilities.add(cboxAbilities.getSelectedItem().toString());
        ArrayList<String> moves = new ArrayList<>();
        moves.add(cboxMoveOne.getSelectedItem().toString());
        moves.add(cboxMoveTwo.getSelectedItem().toString());
        moves.add(cboxMoveThree.getSelectedItem().toString());
        moves.add(cboxMoveFour.getSelectedItem().toString());
        String nickname = txtNickname.getText();
        team.get(teamIndex).setGender(gender);
        team.get(teamIndex).setNature(nature);
        team.get(teamIndex).setAbilities(abilities);
        team.get(teamIndex).setMoves(moves);
        team.get(teamIndex).setNickname(nickname);
        
        JOptionPane.showMessageDialog(null, "Your " + pokemonList.get(pokemonIndex).getName() + " has been updated!");
        
        }
        
        else {
            if (counter != 4){
                JOptionPane.showMessageDialog(null, "Your " + pokemonList.get(pokemonIndex).getName() + " needs to have unique moves.");
            }
        }
        
        
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    static final ArrayList<Pokemon> pokemonList = Pokemon.makeAllPokemon();
    static int pokemonIndex;
    private void lstPokedexMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstPokedexMouseClicked
        // TODO add your handling code here:
        //disable editor until everything loads
        clearAbilities(cboxAbilities);
        clearMoves(cboxMoveOne, cboxMoveTwo, cboxMoveThree, cboxMoveFour);
        //JOptionPane.showMessageDialog(null, "You clicked");
        int selectedIndex = lstPokedex.getSelectedIndex();
        pokemonIndex = selectedIndex;
        //if they select any pokemon
        if (selectedIndex > -1){
            //ArrayList<Pokemon> pokemonList = Pokemon.makeAllPokemon();
            lstPokedex.setSelectedIndex(selectedIndex);
            fillAbilities(cboxAbilities, pokemonList, selectedIndex);
            fillMoves(cboxMoveOne, cboxMoveTwo, cboxMoveThree, cboxMoveFour, pokemonList, selectedIndex);
            enableEditor(rbtnMale, rbtnFemale, txtNickname, cboxNature, cboxAbilities, cboxMoveOne, cboxMoveTwo, cboxMoveThree, cboxMoveFour, btnAddButton, btnUpdate, btnRemove, false, false, false);
            btnUpdate.setEnabled(false);
            String name = pokemonList.get(pokemonIndex).getName().toLowerCase();
            
            iconPokemonToString.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/" + name + ".png")));
            
            d.setTypeIcons(iconType1, iconType2);
            setPokemonName(lblPokemonName);
            setDescriptionLabel(lblDescription);
            
        }
       
        
    }//GEN-LAST:event_lstPokedexMouseClicked

    /*private static boolean checkIfPokemonIsInTeam(){
        if (team.contains(pokemonList.get(pokemonIndex))){
            return true;
        }
        else {
            return false;
        }
    }*/
    
    private void setTypeIcons(JLabel iconOne, JLabel iconTwo){
        //get type of pokemon
        iconOne.setIcon(null);
        iconTwo.setIcon(null);
        String[] typesArray = null;
        String firstType = null;
        String secondType = null;
        String type = null;
        int amountOfTypes;
        String types = pokemonList.get(pokemonIndex).getType();
        types = types.substring(1);
        typesArray = types.split(", "); //tries to split the two types
        if (typesArray.length > 1){
            amountOfTypes = 2; //we know there is two types
            firstType = typesArray[0]; //gets first type
            secondType = typesArray[1].substring(0, typesArray[1].length()-1); //gets second type
            if (secondType.contains(")")){
                secondType = secondType.substring(0, secondType.length()-1); //gets second type
            }
            iconOne.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/" + firstType + ".png")));
            iconTwo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/" + secondType + ".png")));
        }
        else {
            amountOfTypes = 1;
            type = types.substring(0, types.length()-1);
            iconOne.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/" + type + ".png")));
        }
         
        
        //set icon to type image
    }
    
    private static void setDescriptionLabel(JLabel desc){
        //boolean doneWithWords = false;
        int x = -1;
        String line = "";
        String wholeDescription = pokemonList.get(pokemonIndex).getDescription();
        String[] wholeDescriptionArray = wholeDescription.split(" ");
        String[] lineArray;
        ArrayList<String> wholeDescriptionList = new ArrayList<>();
        for (String word : wholeDescriptionArray){
            wholeDescriptionList.add(word);
        } //now there is an arraylist that we can remove words from after they are put into a seperate array for each line
        ArrayList<String> eachLine = new ArrayList<>();
        while (wholeDescriptionList.size() != 0){
            x++; //get new index
            line = ""; //line gets the value of nothing
            for (int i = 0; i != 5; i++){
                try { 
                line += wholeDescriptionList.get(i) + " "; //add each word to line string
                 //add the whole line to eachline arraylist
                } catch (Exception e) {
                    //doneWithWords = true;
                    break;
                }
            }
            eachLine.add(line);
            lineArray = line.split(" "); //split line to get line array, to get each word again
            for (String word : lineArray){
                        wholeDescriptionList.remove(word); //remove each word from arraylist so while loop knows when to stop
            }
            
            
        
        }
        String label = "<html>";
        for (int c = 0; c != eachLine.size(); c++){
            label += eachLine.get(c);
            label += "<br/>"; //new line
        }
        desc.setText(label);
        
    }
    
    private void rbtnMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnMaleActionPerformed
        // TODO add your handling code here:
        rbtnFemale.setSelected(false);
    }//GEN-LAST:event_rbtnMaleActionPerformed

    private void rbtnFemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnFemaleActionPerformed
        // TODO add your handling code here:
        rbtnMale.setSelected(false);
    }//GEN-LAST:event_rbtnFemaleActionPerformed

    private void cboxMoveOneItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboxMoveOneItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cboxMoveOneItemStateChanged

    static ArrayList<Pokemon> team = new ArrayList<>();
    
    private void btnAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddButtonActionPerformed
        // TODO add your handling code here:
        boolean checkIfValid = true; //variable to keep track if input is valid
        ArrayList<JComboBox> comboBoxList = new ArrayList<>(); //arraylist of comboboxes to iterate through
        comboBoxList.add(cboxMoveOne); //add comboboxone to arraylist
        comboBoxList.add(cboxMoveTwo); //add comboboxtwo to arraylist
        comboBoxList.add(cboxMoveThree); //add comboxboxthree to arraylist
        comboBoxList.add(cboxMoveFour); //add comboboxfour to arraylist
        for (int i = 0; i != 4; i++){ //outer for loop to iterate through comboboxes to check for unique moves
            for (int x = 0; x != 4; x++){ //inner for loop that goes for the amount of moves in each combobox
                if (i != x){
                    Object one = comboBoxList.get(i).getSelectedItem();
                    Object two = comboBoxList.get(x).getSelectedItem();
                    if (one.equals(two) == false || one.toString().equals("~Empty Slot~") || two.toString().equals("~Empty Slot~") ){
                        //valid is acceptable
                        //ArrayList<String> movesList = new ArrayList<>();
                       
                    }
                    else {
                        checkIfValid = false;
                        
                    }
                    
                }
            }
        }
        
        int counter = 0;
        if (checkIfValid == true || team.size() == 6){
            for (int i = 0; i != 4; i++){
                if (comboBoxList.get(i).getSelectedItem().equals("~Empty Slot~")){
                    counter++;
                }
        }
            if (team.size() == 6){
                counter = 10;
                checkIfValid = false;
                JOptionPane.showMessageDialog(null, "Your team is full (6 Pokemon).");
            }
            if (counter == 4){
                checkIfValid = false;
                JOptionPane.showMessageDialog(null, "Your " + pokemonList.get(pokemonIndex).getName() + " needs to have at least one move.");
            }
        }
        
        
        
        if (checkIfValid == true){
            
            String name = pokemonList.get(pokemonIndex).getName();
            String type = pokemonList.get(pokemonIndex).getType();
            String gender;
            if (rbtnMale.isSelected()){
                gender = "Male";
            }
            else if (rbtnFemale.isSelected()){
                gender = "Female";
            }
            else {
                gender = "Unspecified";
            }
            String nature = cboxNature.getSelectedItem().toString();
            ArrayList<String> abilities = new ArrayList<>();
            abilities.add(cboxAbilities.getSelectedItem().toString());
            ArrayList<String> moves = new ArrayList<>();
            moves.add(cboxMoveOne.getSelectedItem().toString());
            moves.add(cboxMoveTwo.getSelectedItem().toString());
            moves.add(cboxMoveThree.getSelectedItem().toString());
            moves.add(cboxMoveFour.getSelectedItem().toString());
            String nickname = txtNickname.getText();
            String description = pokemonList.get(pokemonIndex).getDescription();
            
            Pokemon p = new Pokemon(name, type, gender, nature, abilities, moves, nickname, description); //constructor
            team.add(p);
            //lblTestPokemonToString.setText(p.toString());
            
            String pokemonName = pokemonList.get(pokemonIndex).getName().toLowerCase();
            //Check if the icons are empty or does not have an icon at all
            if(iconPokemon1.getIcon() == null)
            {
                
                iconPokemon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/" + pokemonName + ".png"))); // set the icon into the label of the pokemon
                
                
            }
            
            else if(iconPokemon2.getIcon() == null)
            {
                
                
                iconPokemon2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/" + pokemonName + ".png"))); // set the icon into the label of the pokemon
                
            }
            
             else if(iconPokemon3.getIcon() == null)
            {
                
               
                iconPokemon3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/" + pokemonName + ".png"))); // set the icon into the label of the pokemon
                
            }
            
             else if(iconPokemon4.getIcon() == null)
            {
                
                
                iconPokemon4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/" + pokemonName + ".png"))); // set the icon into the label of the pokemon
                
            }
            
             else if(iconPokemon5.getIcon() == null)
            {
                
                
                iconPokemon5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/" + pokemonName + ".png"))); // set the icon into the label of the pokemon
                
            }
            
             else if(iconPokemon6.getIcon() == null)
            {
                
                
                iconPokemon6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/" + pokemonName + ".png"))); // set the icon into the label of the pokemon
                
            }
            
            /*if(txtfPokemon1.getText().isEmpty())
            {
                txtfPokemon1.setText(p.getName() + "\t");
                
                iconPokemon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/articuno.png")));
            }*/
            
        }
        
        else {
            if (counter < 4){
                JOptionPane.showMessageDialog(null, "Your " + pokemonList.get(pokemonIndex).getName() + " needs to have unique moves.");
            }
            else if (counter > 4){
                
            }
        }
    }//GEN-LAST:event_btnAddButtonActionPerformed

    
    private void iconPokemonToStringMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconPokemonToStringMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_iconPokemonToStringMouseClicked

    private void iconPokemon6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconPokemon6MouseClicked
        d.setEditor(rbtnMale, rbtnFemale, txtNickname, cboxNature, cboxAbilities, cboxMoveOne, cboxMoveTwo, cboxMoveThree, cboxMoveFour, lstPokedex, btnAddButton, btnUpdate, btnRemove, 5, iconPokemonToString);
        //if icon is null
       
        try {
            if (!iconPokemon6.getDisabledIcon().equals(null)){
                d.setTypeIcons(iconType1, iconType2);
                setPokemonName(lblPokemonName);
                setDescriptionLabel(lblDescription);
            }
        } catch (Exception e) {}
    }//GEN-LAST:event_iconPokemon6MouseClicked

    private void iconPokemon4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconPokemon4MouseClicked
        d.setEditor(rbtnMale, rbtnFemale, txtNickname, cboxNature, cboxAbilities, cboxMoveOne, cboxMoveTwo, cboxMoveThree, cboxMoveFour, lstPokedex, btnAddButton, btnUpdate, btnRemove, 3, iconPokemonToString);
        //if icon is null
       
        try {
            if (!iconPokemon4.getDisabledIcon().equals(null)){
                d.setTypeIcons(iconType1, iconType2);
                setPokemonName(lblPokemonName);
                setDescriptionLabel(lblDescription);
            }
        } catch (Exception e) {}
    }//GEN-LAST:event_iconPokemon4MouseClicked

    private void iconPokemon2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconPokemon2MouseClicked
        d.setEditor(rbtnMale, rbtnFemale, txtNickname, cboxNature, cboxAbilities, cboxMoveOne, cboxMoveTwo, cboxMoveThree, cboxMoveFour, lstPokedex, btnAddButton, btnUpdate, btnRemove, 1, iconPokemonToString);
        //if icon is null
       
        try {
            if (!iconPokemon2.getDisabledIcon().equals(null)){
                d.setTypeIcons(iconType1, iconType2);
                setPokemonName(lblPokemonName);
                setDescriptionLabel(lblDescription);
            }
        } catch (Exception e) {}
    }//GEN-LAST:event_iconPokemon2MouseClicked

    private void iconPokemon5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconPokemon5MouseClicked
        d.setEditor(rbtnMale, rbtnFemale, txtNickname, cboxNature, cboxAbilities, cboxMoveOne, cboxMoveTwo, cboxMoveThree, cboxMoveFour, lstPokedex, btnAddButton, btnUpdate, btnRemove, 4, iconPokemonToString);
        //if icon is null
       
        try {
            if (!iconPokemon5.getDisabledIcon().equals(null)){
                d.setTypeIcons(iconType1, iconType2);
                setPokemonName(lblPokemonName);
                setDescriptionLabel(lblDescription);
            }
        } catch (Exception e) {}
    }//GEN-LAST:event_iconPokemon5MouseClicked

    private void iconPokemon3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconPokemon3MouseClicked
        d.setEditor(rbtnMale, rbtnFemale, txtNickname, cboxNature, cboxAbilities, cboxMoveOne, cboxMoveTwo, cboxMoveThree, cboxMoveFour, lstPokedex, btnAddButton, btnUpdate, btnRemove, 2, iconPokemonToString);
        //if icon is null
       
        try {
            if (!iconPokemon3.getDisabledIcon().equals(null)){
                d.setTypeIcons(iconType1, iconType2);
                setPokemonName(lblPokemonName);
                setDescriptionLabel(lblDescription);
            }
        } catch (Exception e) {}
    }//GEN-LAST:event_iconPokemon3MouseClicked

    private void iconPokemon1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconPokemon1MouseClicked

        d.setEditor(rbtnMale, rbtnFemale, txtNickname, cboxNature, cboxAbilities, cboxMoveOne, cboxMoveTwo, cboxMoveThree, cboxMoveFour, lstPokedex, btnAddButton, btnUpdate, btnRemove, 0, iconPokemonToString);
        //if icon is null
       
        try {
            if (!iconPokemon1.getDisabledIcon().equals(null)){
                d.setTypeIcons(iconType1, iconType2);
                setPokemonName(lblPokemonName);
                setDescriptionLabel(lblDescription);
            }
        } catch (Exception e) {}
    }//GEN-LAST:event_iconPokemon1MouseClicked

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        Pokemon p = team.get(teamIndex); //gets the selected pokemon
        team.remove(p); //remove pokemon from team
        clearAllTeamIcons(iconPokemon1, iconPokemon2, iconPokemon3, iconPokemon4, iconPokemon5, iconPokemon6);
        clearPokemonInfo(lblPokemonName, iconPokemonToString, iconType1, iconType2, lblDescription);
        ArrayList<String> pokemonTeamNames = new ArrayList<>();
        JLabel[] allIcons = {iconPokemon1, iconPokemon2, iconPokemon3, iconPokemon4, iconPokemon5, iconPokemon6};
        for (int i = 0; i != team.size(); i++){
            pokemonTeamNames.add(team.get(i).getName()); //populate pokemon team names arraylist
        }
        for (int i = 0; i != team.size(); i++){
            allIcons[i].setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/" + pokemonTeamNames.get(i) + ".png")));
        }
        clearAbilities(cboxAbilities);
        clearMoves(cboxMoveOne, cboxMoveTwo, cboxMoveThree, cboxMoveFour);
        rbtnMale.setSelected(false);
        rbtnFemale.setSelected(false);
        cboxNature.setSelectedIndex(0);
        txtNickname.setText(null);
        disableEditor(rbtnMale, rbtnFemale, txtNickname, cboxNature, cboxAbilities, cboxMoveOne, cboxMoveTwo, cboxMoveThree, cboxMoveFour, btnAddButton, btnUpdate, btnRemove);
        lstPokedex.setSelectedValue(null, false);
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAsActionPerformed
        // TODO add your handling code here:
        if (!team.isEmpty()){
            String wholeName = FileIO.writeTeam("Team", team, false);
            String folder = wholeName.substring(0, 9);
            String txtFileName = wholeName.substring(11);
            JOptionPane.showMessageDialog(null, "Team successfully saved in " + folder + " as " + txtFileName + "!");
        }
        else {
            JOptionPane.showMessageDialog(null, "You cannot save an empty team.");
        }
    }//GEN-LAST:event_btnSaveAsActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnMainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainMenuActionPerformed
        // TODO add your handling code here:
        team.clear();
        MainMenu.displayMainMenu();
        dispose();
    }//GEN-LAST:event_btnMainMenuActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if (!team.isEmpty()){
            String wholeName = FileIO.writeTeam("Team", team, true);
            JOptionPane.showMessageDialog(null, "Team successfully overwritten!");
        }
        else {
            JOptionPane.showMessageDialog(null, "You cannot save an empty team.");
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private static void clearAllTeamIcons(JLabel one, JLabel two,
                                              JLabel three, JLabel four,
                                              JLabel five, JLabel six){
        one.setIcon(null);
        two.setIcon(null);
        three.setIcon(null);
        four.setIcon(null);
        five.setIcon(null);
        six.setIcon(null);
    }
    
    public static int getPokemonIndex(Pokemon p){
        for (int i = 0; i != pokemonList.size(); i++){
            if (p.getName().equals(pokemonList.get(i).getName())){
                return i;
            }
        }
        return -1;
    }
    
    private static void clearPokemonInfo(JLabel name, JLabel icon,
                                         JLabel typeOne, JLabel typeTwo,
                                         JLabel desc){
        name.setText(null);
        icon.setIcon(null);
        typeOne.setIcon(null);
        typeTwo.setIcon(null);
        desc.setText(null);
    }
    
    public static void setAllAttributesToNull(JRadioButton male, JRadioButton female, JTextField nickname, JComboBox nature, JComboBox abilities,
                          JComboBox moveOne, JComboBox moveTwo, JComboBox moveThree, JComboBox moveFour){
        male.setSelected(false);
        female.setSelected(false);
        nickname.setText(null);
        nature.setSelectedItem(null);
        abilities.setSelectedItem(null);
        moveOne.setSelectedItem("~Empty Slot~");
        moveTwo.setSelectedItem("~Empty Slot~");
        moveThree.setSelectedItem("~Empty Slot~");
        moveFour.setSelectedItem("~Empty Slot~"); //^^ sets everything to default   
        
    }
    
    public void setEditor(JRadioButton male, JRadioButton female, JTextField nickname, JComboBox nature, JComboBox abilities,
                          JComboBox moveOne, JComboBox moveTwo, JComboBox moveThree, JComboBox moveFour, JList pokedex, JButton addBtn, 
                          JButton updateBtn, JButton removeBtn, int theTeamIndex, JLabel iconPokemonToString){ //sets a pokemon to be in the editor
        try {
            Pokemon p = team.get(theTeamIndex); //gets pokemon at that index in the team, if there is no pokemon, it will catch exception and eat it
            teamIndex = theTeamIndex; //sets static variable teamindex to the selected pokemons teamindex
            pokemonIndex = getPokemonIndex(p);
            pokedex.setSelectedIndex(pokemonIndex);
            iconPokemonToString.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pictures/" + pokemonList.get(pokemonIndex).getName().toLowerCase() + ".png")));
            clearMoves(moveOne, moveTwo, moveThree, moveFour);
            clearAbilities(abilities);
            fillAbilities(abilities, pokemonList, pokemonIndex);
            fillMoves(moveOne, moveTwo, moveThree, moveFour, pokemonList, pokemonIndex);
            setAllAttributesToNull(male, female, nickname, nature, abilities, moveOne, moveTwo, moveThree, moveFour);
            String selectedGender = p.getGender();
            String selectedNickname = p.getNickname();
            String selectedNature = p.getNature();
            String selectedAbility = (p.getAbilities()).get(0);
            ArrayList<String> selectedMoves = p.getMoves();
            if (selectedGender.equals("Male")){
                male.setSelected(true);
                female.setSelected(false);
            }
            else if (selectedGender.equals("Female")){
                male.setSelected(false);
                female.setSelected(true);
            }
            else {
                male.setSelected(false);
                female.setSelected(false);
            } //^^ sets gender accordingly
            nickname.setText(selectedNickname); //sets nickname accordingly
            nature.setSelectedItem(selectedNature); //sets nature accordingly
            abilities.setSelectedItem(selectedAbility); //sets ability accordingly
            moveOne.setSelectedItem(selectedMoves.get(0));
            moveTwo.setSelectedItem(selectedMoves.get(1));
            moveThree.setSelectedItem(selectedMoves.get(2));
            moveFour.setSelectedItem(selectedMoves.get(3)); //^^ sets moves accordingly
            enableEditor(male, female, nickname, nature, abilities, moveOne, moveTwo, moveThree, moveFour, addBtn, updateBtn, removeBtn, true, true, true);
            
            
        } catch (Exception e) {
            //System.out.println();
        }
    }
    
    private static void setPokemonName(JLabel name){
        name.setText(pokemonList.get(pokemonIndex).getName());
    }
    
   /* public static String getGenderCharacter(Pokemon p)
    {
        if(p.getGender().equalsIgnoreCase("Male"))
        {
           
        }
        
        
    }/
    
    /**
     * @param args the command line arguments
     */
    
    public static ArrayList<String> validateMoves(ArrayList<String> a){
        try {
        for (int i = 0; i != a.size(); i++){
            for (int x = 0; x != a.size(); x++){
                if (i != x){
                    
                    if (a.get(i).equals(a.get(x))){
                        
                        a.remove(a.get(i));
                        
                    }
                    else {}
                    
                }
            }
        }
        } catch (Exception e) {}
        return a;
    }
    
    public static void fillMoves(JComboBox one, JComboBox two, JComboBox three, JComboBox four, ArrayList<Pokemon> list, int indexNum){
        ArrayList<String> a = list.get(indexNum).getMoves();
        one.addItem("~Empty Slot~");
        two.addItem("~Empty Slot~");
        three.addItem("~Empty Slot~");
        four.addItem("~Empty Slot~");
        a = validateMoves(a);
        for (int i = 0; i != a.size(); i++){
            one.addItem(a.get(i));
            two.addItem(a.get(i));
            three.addItem(a.get(i));
            four.addItem(a.get(i));
        }
    }
    
    public static void fillAbilities(JComboBox abilities, ArrayList<Pokemon> list, int indexNum){
        ArrayList<String> a = list.get(indexNum).getAbilities();
        for (int i = 0; i != a.size(); i++){
            abilities.addItem(a.get(i));
        }
    }
    
    public static void clearAbilities(JComboBox abilities){
        abilities.removeAllItems();
    }
    
    public static void clearMoves(JComboBox moveOne, JComboBox moveTwo, JComboBox moveThree, JComboBox moveFour){
        moveOne.removeAllItems();
        moveTwo.removeAllItems();
        moveThree.removeAllItems();
        moveFour.removeAllItems();
    }
    
    public static void disableEditor(JRadioButton male, JRadioButton female, JTextField nickname, JComboBox nature, JComboBox abilities,
                                     JComboBox moveOne, JComboBox moveTwo, JComboBox moveThree, JComboBox moveFour, JButton addBtn, JButton updateBtn, JButton removeBtn){
        male.setEnabled(false);
        female.setEnabled(false);
        nickname.setEnabled(false);
        nature.setEnabled(false);
        abilities.setEnabled(false);
        moveOne.setEnabled(false);
        moveTwo.setEnabled(false);
        moveThree.setEnabled(false);
        moveFour.setEnabled(false);
        addBtn.setEnabled(false);
        updateBtn.setEnabled(false);
        removeBtn.setEnabled(false);
    }
    
    public static void enableEditor(JRadioButton male, JRadioButton female, JTextField nickname, JComboBox nature, JComboBox abilities,
                                    JComboBox moveOne, JComboBox moveTwo, JComboBox moveThree, JComboBox moveFour, JButton addBtn, JButton updateBtn, JButton removeBtn, 
                                    boolean pokemonCreated, boolean update, boolean remove){
        male.setEnabled(true);
        female.setEnabled(true);
        nickname.setEnabled(true);
        nature.setEnabled(true);
        abilities.setEnabled(true);
        moveOne.setEnabled(true);
        moveTwo.setEnabled(true);
        moveThree.setEnabled(true);
        moveFour.setEnabled(true);
        addBtn.setEnabled(true);
        final String pokemonName = pokemonList.get(pokemonIndex).getName();
        //System.out.println(pokemonName);
        if (pokemonCreated == false){
            male.setSelected(false);
            female.setSelected(false);
        }
        switch (pokemonName) {
            case "Nidoran-M":
            case "Nidorino":
            case "Nidoking":
                male.setSelected(true);
                female.setEnabled(false);
                male.setEnabled(false);
                break;
            case "Nidoran-F":
            case "Nidorina":
            case "Nidoqueen":
                female.setSelected(true);
                male.setEnabled(false);
                female.setEnabled(false);
                break;
            case "Articuno":
            case "Moltres":
            case "Zapdos":
            case "Mewtwo":
            case "Mew":
                female.setEnabled(false);
                male.setEnabled(false);
                break;
            default:
                //System.exit(0);
                break;
        }
        updateBtn.setEnabled(update);
        removeBtn.setEnabled(remove);
    }
    
    public static void fillPokedex(JList lstPokedex){
        ArrayList<String> pokedex = new ArrayList<>();
        pokedex = FileIO.readPokedex("PokemonInfo//PokemonList.txt");
        DefaultListModel dlm =  new DefaultListModel();
        for (int i = 1; i != 152; i++){
            dlm.addElement(pokedex.get(i));
        }
        lstPokedex.setModel(dlm);
    }
    
    public static void windowPanel() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DesignWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DesignWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DesignWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DesignWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DesignWindow().setVisible(true);
            }
        });
    }

    //private static boolean loadCheck = false;
    private static int teamIndex;
    private static DesignWindow d = new DesignWindow();
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddButton;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnMainMenu;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveAs;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cboxAbilities;
    private javax.swing.JComboBox<String> cboxMoveFour;
    private javax.swing.JComboBox<String> cboxMoveOne;
    private javax.swing.JComboBox<String> cboxMoveThree;
    private javax.swing.JComboBox<String> cboxMoveTwo;
    private javax.swing.JComboBox<String> cboxNature;
    private javax.swing.JLabel iconPokemon1;
    private javax.swing.JLabel iconPokemon2;
    private javax.swing.JLabel iconPokemon3;
    private javax.swing.JLabel iconPokemon4;
    private javax.swing.JLabel iconPokemon5;
    private javax.swing.JLabel iconPokemon6;
    private javax.swing.JLabel iconPokemonToString;
    private javax.swing.JLabel iconType1;
    private javax.swing.JLabel iconType2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblAbilities;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblEditor;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblMoves;
    private javax.swing.JLabel lblNature;
    private javax.swing.JLabel lblNickname;
    private javax.swing.JLabel lblPokedex;
    private javax.swing.JLabel lblPokemonName;
    private javax.swing.JLabel lblTeam;
    private javax.swing.JList<String> lstPokedex;
    private javax.swing.JRadioButton rbtnFemale;
    private javax.swing.JRadioButton rbtnMale;
    private javax.swing.JTextField txtNickname;
    // End of variables declaration//GEN-END:variables
}
