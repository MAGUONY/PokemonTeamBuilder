/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.FileIO;
import Controller.Pokemon;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JList;


/**
 *
 * @author cwainczak378
 */
public class LoadFile extends javax.swing.JFrame {

    /**
     * Creates new form LoadFile
     */
    public LoadFile() {
        initComponents();
        fillTeamList(lstTextFiles, btnLoad, btnDelete);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstTextFiles = new javax.swing.JList<>();
        btnExit = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblMessage = new javax.swing.JLabel();
        btnLoad = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Load");

        lstTextFiles.setBorder(new javax.swing.border.MatteBorder(null));
        lstTextFiles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstTextFilesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstTextFiles);

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblMessage.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblMessage.setText("Select the team you want to load:");

        btnLoad.setText("Load");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMessage, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLoad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addComponent(lblMessage)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnLoad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnExit)
                        .addGap(26, 26, 26))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private static void fillTeamList(JList list, JButton load, JButton delete){
        ArrayList<String> a = FileIO.findAllTeamFiles();
        DefaultListModel dlm = new DefaultListModel();
        for (String s : a){
            dlm.addElement(s);
        }
        list.setModel(dlm);
        load.setEnabled(false);
        delete.setEnabled(false);
        //String firstElement = dlm.get(0).toString();
        if (dlm.get(0).toString().equals("No teams created yet...")){
            list.setEnabled(false); //if no teams are created, list is disabled
            delete.setEnabled(false); //if no teams are created, delete button is disabled
        }
    }
    
    private static void clearTeamList(JList list){
        DefaultListModel dlm = new DefaultListModel();
        list.setModel(dlm);
    }
    
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        MainMenu.displayMainMenu();
        dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        FileIO.delete(selectedTeam);
        clearTeamList(lstTextFiles);
        fillTeamList(lstTextFiles, btnLoad, btnDelete);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void lstTextFilesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstTextFilesMouseClicked
        
        selectedIndex = lstTextFiles.getSelectedIndex();
        if (selectedIndex > -1){
            btnDelete.setEnabled(true);
            btnLoad.setEnabled(true);
            lstTextFiles.setSelectedIndex(selectedIndex);
            selectedTeam = lstTextFiles.getSelectedValue();
        }
        else{  
            btnDelete.setEnabled(false);
            btnLoad.setEnabled(false);
            selectedTeam = null;
        }
        
    }//GEN-LAST:event_lstTextFilesMouseClicked

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        // TODO add your handling code here:
        //get team from file
        ArrayList<Pokemon> team = new ArrayList<>();
        ArrayList<String> teamInfo = new ArrayList<>(); //make an arraylist to store team info
        teamInfo = FileIO.readByLines("SavedTeams/" + selectedTeam); //get all info by each line
        int pokemonCount = 0;
        int pokemonIndex;
        for (String line : teamInfo){
            if (line.equals("")){
                pokemonCount++;
            }
        }
        ArrayList<ArrayList> eachPokemon = new ArrayList<>(); //an arraylist to hold each pokemon
        for (int i = 0; i != pokemonCount; i++){
            ArrayList<String> thePokemonInfo = new ArrayList<>();
            for (int x = 0; x != 6; x++){
                thePokemonInfo.add(teamInfo.get(x));
            }
            for (int e = 0; e != 7; e++){
                teamInfo.remove(teamInfo.get(0));
            }
            String[] splittablePokemonInfo = {thePokemonInfo.get(0), thePokemonInfo.get(1),
                                              thePokemonInfo.get(2), thePokemonInfo.get(3),
                                              thePokemonInfo.get(4), thePokemonInfo.get(5)};
            String pokemonName = (splittablePokemonInfo[0].split(" "))[1];
            String pokemonNickname = (splittablePokemonInfo[0].split("\\("))[1].substring(0, (splittablePokemonInfo[0].split("\\("))[1].length()-1);
            String pokemonType = splittablePokemonInfo[1].substring(6);
            String pokemonGender = splittablePokemonInfo[2].substring(8);
            String pokemonNature = splittablePokemonInfo[3].substring(8, splittablePokemonInfo[3].length());
            String pokemonAbility = splittablePokemonInfo[4].substring(9);
            ArrayList<String> pokemonAbilities = new ArrayList<>();
            pokemonAbilities.add(pokemonAbility);
            String[] pokemonMoves = splittablePokemonInfo[5].substring(7).split(", ");
            ArrayList<String> pokemonMovesList = new ArrayList<>();
            for (String move : pokemonMoves){
                pokemonMovesList.add(move);
            }
            ArrayList<String> fakeInfo = new ArrayList<>();
            Pokemon tempPokemon = new Pokemon(pokemonName, "", "", "", fakeInfo, fakeInfo, "", "");
            pokemonIndex = DesignWindow.getPokemonIndex(tempPokemon);
            String pokemonDescription = Pokemon.getAllDescriptions().get(pokemonIndex);
            team.add(new Pokemon(pokemonName, pokemonType, pokemonGender, pokemonNature,
                                 pokemonAbilities, pokemonMovesList, pokemonNickname, pokemonDescription));
        }
        DesignWindow.fillTeam(team);
        DesignWindow.windowPanel();
        dispose();
        
    }//GEN-LAST:event_btnLoadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void loadTeams() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoadFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoadFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoadFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoadFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoadFile().setVisible(true);
            }
        });
    }

    private static int selectedIndex;
    private static String selectedTeam;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnLoad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JList<String> lstTextFiles;
    // End of variables declaration//GEN-END:variables
}
